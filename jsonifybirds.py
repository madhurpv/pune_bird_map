# -*- coding: utf-8 -*-
"""jsonifyBirds.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vBc8BqTvH61ROTUuYiUT1khEypdyuuP5
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import json


df = pd.read_csv('/content/drive/MyDrive/FilteredEntries.csv', on_bad_lines='warn', sep='\t')

df

names = df['COMMON NAME'].unique().tolist()

print(names)

def create_json(df, name):
    dfParakeet = df[df['COMMON NAME'] == name]
    dfParakeet = dfParakeet.drop(['TIME OBSERVATIONS STARTED','CATEGORY','LOCALITY','LOCALITY TYPE', 'COMMON NAME'], axis=1)
    dfParakeet['OBSERVATION COUNT'] = dfParakeet['OBSERVATION COUNT'].replace('X', 1)

    dfParakeet['OBSERVATION COUNT'] = pd.to_numeric(dfParakeet['OBSERVATION COUNT'], errors='coerce')
    dfParakeet['LATITUDE'] = pd.to_numeric(dfParakeet['LATITUDE'], errors='coerce')
    dfParakeet['LONGITUDE'] = pd.to_numeric(dfParakeet['LONGITUDE'], errors='coerce')
    dfParakeet['OBSERVATION DATE'] = pd.to_numeric(dfParakeet['OBSERVATION DATE'], errors='coerce')


    dfParakeet['LATITUDE'] = dfParakeet['LATITUDE'].round(4)
    dfParakeet['LONGITUDE'] = dfParakeet['LONGITUDE'].round(4)

    dfParakeet['OBSERVATION DATE'] = pd.to_datetime(dfParakeet['OBSERVATION DATE']).dt.month
    dfFinal = (
        dfParakeet.groupby(['LATITUDE', 'LONGITUDE', 'OBSERVATION DATE'], as_index=False)
        .agg({'OBSERVATION COUNT': 'sum'})
    )

    dfFinal.rename(columns={
        'LATITUDE': 'a',
        'LONGITUDE': 'b',
        'OBSERVATION DATE': 'c',
        'OBSERVATION COUNT': 'd'
    }, inplace=True)
    dfFinal = (
        dfFinal.groupby('c', group_keys=False)
        .apply(lambda x: x[['a', 'b', 'd']].to_dict(orient='records'))
    )

    # Convert grouped data to a dictionary
    grouped_dict = dfFinal.to_dict()

    # Convert dictionary to compact JSON (no indentation or extra whitespace)
    compact_json_output = json.dumps(grouped_dict, separators=(',', ':'))

    # Define the output file path, removing white spaces from the name
    output_path = f'/content/drive/MyDrive/newJsonBirds/{name.replace(" ", "")}.json'

    # Save JSON data to a file
    with open(output_path, 'w') as file:
        file.write(compact_json_output)

    print(name+" done")

for name in names:
  create_json(df, name)



"""OG code"""

dfParakeet = df[df['COMMON NAME'] == 'Alexandrine Parakeet']

dfParakeet

dfParakeet = dfParakeet.drop('TIME OBSERVATIONS STARTED', axis=1)
dfParakeet = dfParakeet.drop('CATEGORY', axis=1)
dfParakeet = dfParakeet.drop('LOCALITY', axis=1)
dfParakeet = dfParakeet.drop('LOCALITY TYPE', axis=1)
dfParakeet = dfParakeet.drop('COMMON NAME', axis=1)

dfParakeet = dfParakeet[dfParakeet['OBSERVATION COUNT']!= 'X']

dfParakeet['OBSERVATION COUNT'].unique()

dfParakeet['OBSERVATION COUNT'] = pd.to_numeric(dfParakeet['OBSERVATION COUNT'], errors='coerce')
dfParakeet['LATITUDE'] = pd.to_numeric(dfParakeet['LATITUDE'], errors='coerce')
dfParakeet['LONGITUDE'] = pd.to_numeric(dfParakeet['LONGITUDE'], errors='coerce')

dfParakeet['LATITUDE'] = dfParakeet['LATITUDE'].round(4)
dfParakeet['LONGITUDE'] = dfParakeet['LONGITUDE'].round(4)

dfParakeet

dfParakeet['OBSERVATION COUNT'].unique()

dfParakeet['OBSERVATION DATE'] = pd.to_datetime(dfParakeet['OBSERVATION DATE']).dt.month

dfParakeet.columns

dfParakeet

print(dfParakeet['OBSERVATION COUNT'].sum())

dfFinal = (
    dfParakeet.groupby(['LATITUDE', 'LONGITUDE', 'OBSERVATION DATE'], as_index=False)
    .agg({'OBSERVATION COUNT': 'sum'})
)

dfFinal['OBSERVATION COUNT'].unique()

print(dfFinal['OBSERVATION COUNT'].sum())

# dfFinal = dfFinal[dfFinal['OBSERVATION DATE'] != 1]

dfFinal.rename(columns={
    'LATITUDE': 'a',
    'LONGITUDE': 'b',
    'OBSERVATION DATE': 'c',
    'OBSERVATION COUNT': 'd'
}, inplace=True)

dfFinal

import json

# Group the data
dfFinal = (
    dfFinal.groupby('c', group_keys=False)
    .apply(lambda x: x[['a', 'b', 'd']].to_dict(orient='records'))
)

# Convert grouped data to a dictionary
grouped_dict = dfFinal.to_dict()

# Convert dictionary to compact JSON (no indentation or extra whitespace)
compact_json_output = json.dumps(grouped_dict, separators=(',', ':'))

# Save JSON data to a file
with open(output_path, 'w') as file:
    file.write(compact_json_output)

print("Compact JSON data saved successfully.")